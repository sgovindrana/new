Valid Sudoku

//Approach-1 (Naive and simplest using 3 iterations of the sudoku) //TC= O(1) , SC= O(1)
import java.util.HashSet;
public class Solution {
    public boolean validSub(char[][] board, int sr, int er, int sc, int ec) {
        HashSet<Character> st = new HashSet<>();
        for (int row = sr; row <= er; row++) {
            for (int col = sc; col <= ec; col++) {
                char ch = board[row][col];
                if (ch == '.') continue;
                if (st.contains(ch)) return false;
                st.add(ch);
            }
        }
        return true;
    }

    public boolean isValidSudoku(char[][] board) {
        // Validate rows
        for (int row = 0; row < 9; row++) {
            HashSet<Character> st = new HashSet<>();
            for (int col = 0; col < 9; col++) {
                char ch = board[row][col];
                if (ch == '.') continue;
                if (st.contains(ch)) return false;
                st.add(ch);
            }
        }

        // Validate columns
        for (int col = 0; col < 9; col++) {
            HashSet<Character> st = new HashSet<>();
            for (int row = 0; row < 9; row++) {
                char ch = board[row][col];
                if (ch == '.') continue;
                if (st.contains(ch)) return false;
                st.add(ch);
            }
        }

        // Validate each 3*3 box
        for (int sr = 0; sr < 9; sr += 3) {
            int er = sr + 2;
            for (int sc = 0; sc < 9; sc += 3) {
                int ec = sc + 2;
                if (!validSub(board, sr, er, sc, ec))
                    return false;
            }
        }

        return true;
    }
}


//Approach-2 (One iteration using hashmap and indexing boxes)
//see the diagrma (in the link above) to understand the indexing of the boxes  //TC= O(1) , SC= O(1)
public class Solution {
    public boolean isValidSudoku(char[][] board) {
        HashSet<String> st = new HashSet<>();

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') continue;

                String row = Character.toString(board[i][j]) + "_row_" + Integer.toString(i);
                String col = Character.toString(board[i][j]) + "_col_" + Integer.toString(j);
                String box = Character.toString(board[i][j]) + "_box_" + Integer.toString(i/3) + "_" + Integer.toString(j/3);

                if (st.contains(row) || st.contains(col) || st.contains(box)) return false;
                st.add(row);
                st.add(col);
                st.add(box);
            }
        }
        return true;
    }
}

class GroupAnagrams {

  public List<List<String>> groupAnagramsCategorizeBySorting(String[] strs) {

    if (strs == null || strs.length == 0)
      return new ArrayList<>();

    Map<String, List<String>> stringAnagramsMap = new HashMap<>();
    for (String s : strs) {
      char[] arr = s.toCharArray();
      Arrays.sort(arr);
      String key = String.valueOf(arr);

      if (!stringAnagramsMap.containsKey(key))
        stringAnagramsMap.put(key, new ArrayList<>());

      stringAnagramsMap.get(key).add(s);
    }

    List<List<String>> resultList = new ArrayList<>();
    for (Map.Entry<String, List<String>> stringAnagrams : stringAnagramsMap.entrySet()) {
      resultList.add(stringAnagrams.getValue());
    }
    return resultList;
  }
